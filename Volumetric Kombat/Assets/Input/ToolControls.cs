//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/ToolControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ToolControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ToolControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ToolControls"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""06fca0a3-9828-4152-94ca-5019a9b2d7a9"",
            ""actions"": [
                {
                    ""name"": ""Leftclick"",
                    ""type"": ""Button"",
                    ""id"": ""2c81db37-a51c-4e2f-8208-964b6ae2a5c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rightclick"",
                    ""type"": ""Button"",
                    ""id"": ""a5d0b55b-c2e9-48c7-8a1c-4c8a5f471ab9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Value"",
                    ""id"": ""2568c1c5-dbd4-4a19-b3f7-97c28b2c9797"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a1f79a8-8f51-4131-acc7-48182d9173ee"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Leftclick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9116c213-13f6-4668-ac2f-1ca51b0cd5c9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50fb44c3-cfaa-4549-b8d8-6c0e2f09a16d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse&Keyboard"",
                    ""action"": ""Rightclick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse&Keyboard"",
            ""bindingGroup"": ""Mouse&Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Leftclick = m_Default.FindAction("Leftclick", throwIfNotFound: true);
        m_Default_Rightclick = m_Default.FindAction("Rightclick", throwIfNotFound: true);
        m_Default_Drag = m_Default.FindAction("Drag", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_Leftclick;
    private readonly InputAction m_Default_Rightclick;
    private readonly InputAction m_Default_Drag;
    public struct DefaultActions
    {
        private @ToolControls m_Wrapper;
        public DefaultActions(@ToolControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Leftclick => m_Wrapper.m_Default_Leftclick;
        public InputAction @Rightclick => m_Wrapper.m_Default_Rightclick;
        public InputAction @Drag => m_Wrapper.m_Default_Drag;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @Leftclick.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftclick;
                @Leftclick.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftclick;
                @Leftclick.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftclick;
                @Rightclick.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightclick;
                @Rightclick.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightclick;
                @Rightclick.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightclick;
                @Drag.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDrag;
                @Drag.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDrag;
                @Drag.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnDrag;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Leftclick.started += instance.OnLeftclick;
                @Leftclick.performed += instance.OnLeftclick;
                @Leftclick.canceled += instance.OnLeftclick;
                @Rightclick.started += instance.OnRightclick;
                @Rightclick.performed += instance.OnRightclick;
                @Rightclick.canceled += instance.OnRightclick;
                @Drag.started += instance.OnDrag;
                @Drag.performed += instance.OnDrag;
                @Drag.canceled += instance.OnDrag;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse&Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IDefaultActions
    {
        void OnLeftclick(InputAction.CallbackContext context);
        void OnRightclick(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
    }
}
